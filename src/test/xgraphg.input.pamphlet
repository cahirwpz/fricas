<<setUp>>=
-- we need some vertices
V := LabeledVertex Symbol
a: V := vertex "A"
b: V := vertex "B"
c: V := vertex "C"

-- the directed situation
D := LabeledDirectedEdge(Symbol, V)
dab: D := edge(a,b, "alpha"::Symbol)
dac: D := edge(a, c, "beta"::Symbol)
dbc: D := edge(b, c, "gamma"::Symbol)
dba: D := edge(b, a, "delta"::Symbol)
daa: D := edge(a, a, "id"::Symbol)
dbb: D := edge(b, a, "id"::Symbol)
DG := GenericGraph(V,D)

-- Prepare for graph of graphs
-- first the "vertices"
dg1: DG := finiteGraph([], [dab, dac, dbc, dba, daa, dbb])$DG
dg2: DG := finiteGraph([], [daa, dab])
dg3: DG := finiteGraph([],[daa,dac,dbb])

-- create some edges, here we create undirected ones
DE := LabeledUndirectedEdge(Symbol, DG)
ug12: DE := edge( dg1, dg2, "phi12"::Symbol)
ug23: DE := edge(dg2, dg3, "phi23"::Symbol)
ug31: DE := edge(dg3, dg1, "phi31"::Symbol)

UDG := GenericGraph(DG, DE)
udg: UDG := finiteGraph([], [ug12, ug23])

assertEqualsSortedV(x: List DG, y: List DG): Void ==_
    assertEquals(sort(smaller?, x), sort(smaller?, y))
assertEqualsSortedE(x: List DE, y: List DE): Void ==_
    assertEquals(sort(smaller?, x), sort(smaller?, y))
@

<<test:vertices>>=
assertEqualsSortedV(vertices udg, [dg1,dg2,dg3])
@

<<test:edges>>=
assertEqualsSortedE(edges udg, [ug12, ug23])
@

Don't change the edges if the edge is already in the graph.
<<test:insert12>>=
udg := insert!(ug12, udg)
assertEqualsSortedE(edges udg, [ug12, ug23])
@

<<test:insert31>>=
udg := insert!(ug31, udg)
assertEqualsSortedE(edges udg, [ug12, ug23, ug31])
@

<<test:remove-edge>>=
udg: UDG := remove!(ug12, udg)
assertEqualsSortedE(edges udg, [ug23])
assertEqualsSortedV(vertices udg, [dg1,dg2,dg3])
@

<<test:remove-vertex3>>=
udg := remove!(dg3, udg)
assertEqualsSortedV(vertices udg, [dg1,dg2])
assertEqualsSortedE(edges udg, [ug12])
@

<<test:degree>>=
dudg: DG -> Integer := degree udg
assertEquals([dudg dg1, dudg dg2, dudg dg3], [1,2,1]
@

<<test:remove-degree>>=
udg := remove!(dg3, udg)
dudg: DG -> Integer := degree udg
assertEquals([dudg dg1, dudg dg2, dudg dg3], [1,1,-1]
@

<<test:adj12>>=
assertEquals(adjacency(udg)(dg1,dg2), 1)
@

<<test:adj23>>=
assertEquals(adjacency(udg)(dg2,dg3), 1)
@

<<test:adj31>>=
assertEquals(adjacency(udg)(dg1,dg3), 0)
@

<<test:adjmat>>=
vs: List DG := vertices udg
m: Matrix NonNegativeInteger := matrix [[0,1,0],[1,0,1],[0,1,0]]
assertEquals(adjacencyMatrix(udg), m)
@
