\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra oftool.spad}
\author{Waldek Hebisch}
\maketitle
\begin{abstract}
Auxiliary package.
\end{abstract}
\eject
\tableofcontents
\eject
\section{About this module}

<<package OFTOOL OutputFormTools>>=
)abbrev package OFTOOL OutputFormTools
OutputFormTools : with
    atom? : OutputForm -> Boolean
      ++ atom?(f) checks if form f is atomic, false means composite
    integer? : OutputForm -> Boolean
      ++ integer?(f) checks if f is an integer, this implies atom?(f)
    integer : OutputForm -> Integer
      ++ integer(f) gives integer corresponding to f.  Valid only
      ++ when integer?(f) is true
    symbol? : OutputForm -> Boolean
      ++ symbol?(f) checks if f is a symbol, this implies atom?(f)
    symbol : OutputForm -> Symbol
      ++ symbol(f) gives symbol corresponding to f.  Valid only
      ++ when symbol?(f) is true
    string? : OutputForm -> Boolean
      ++ string?(f) checks if f is a string, this implies atom?(f)
    string : OutputForm -> String
      ++ string(f) gives string corresponding to f.  Valid only
      ++ when string?(f) is true
    operator : OutputForm -> OutputForm
      ++ operator(f) gives operator (head) of form f.  Valid only
      ++ when atom?(f) is false
    arguments : OutputForm -> List(OutputForm)
      ++ arguments(f) gives arguments of form f.  Valid only
      ++ when atom?(f) is false
  == add

    atom?(x) == ATOM(x)$Lisp

    integer?(x) == INTEGERP(x)$Lisp

    integer(x) == x pretend Integer

    symbol?(x) == SYMBOLP(x)$Lisp

    symbol(x) == x pretend Symbol

    string?(x) == STRINGP(x)$Lisp

    string(x) == x pretend String

    operator(x) == first(x pretend List(OutputForm))

    arguments(x) == rest(x pretend List(OutputForm))
@

\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@

<<*>>=
<<license>>
<<package OUTTRAN OutputTransformation>>
@
\eject
\end{document}
