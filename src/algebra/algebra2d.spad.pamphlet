\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra algebra2d.spad}
\author{Ralf Hemmecke}
\maketitle
\begin{abstract}
Translation of charybdis formatter from src/interp/i-output.boot to spad.
\end{abstract}
\eject
\tableofcontents
\eject
\section{About this module}

<<category FORMCAT OutputFormatterCategory>>=
)abbrev category FORMCAT OutputFormatterCategory
OutputFormatterCategory: Category == with
    convert: (OutputForm, Integer) -> %
      ++ convert(o, step) changes o in standard output format to
      ++ given format and also adds the given step number.
    display: % -> Void
      ++ display(t) outputs the formatted code
@

<<domain ALGFORM Algebra2dFormatter>>=
)abbrev domain ALGFORM Algebra2dFormatter
Algebra2dFormatter: OutputFormatterCategory with
    charybdis: (OutputForm, Integer, Integer) -> %
  == add
    OF ==> OutputForm
    SEX ==> SExpression
    asSEX z ==> z pretend SEX
    asOF z ==> z pretend OF
    toOF z ==> z::OF
    sy z ==> z::Symbol
    sx z ==> outputForm sy z

    -- charyTopWidth u ==
    --     atom u => u
    --     atom first u => putWidth u
    --     NUMBERP CDAR u => u
    --     putWidth u
    charyTopWidth(u: OF): OF ==
      atom? u => u
      atom?(op := operator u) => putWidth$Lisp u  -- [foo, :l]
      integer?(n: OF := first arguments op) => u  -- [[bar, n], ]
      putWidth$Lisp u

    -- charyTop(u,start,linelength) ==
    --   u is ['SC,:l] or u is [['SC,:.],:l] =>
    --     for a in l repeat charyTop(a,start,linelength)
    --     '" "
    --   u is [['CONCATB,:.],:m,[['SC,:.],:l]] =>
    --     charyTop(['CONCATB,:m],start,linelength)
    --     charyTop(['SC,:l],start+2,linelength-2)
    --   u is ['CENTER,a] =>
    --     b := charyTopWidth a
    --     (w := WIDTH(b)) > linelength-start => charyTop(a,start,linelength)
    --     charyTop(b, QUOTIENT(linelength-start-w, 2), linelength)
    --   v := charyTopWidth u
    --   EQ(keyp u,'ELSE) => charyElse(u,v,start,linelength)
    --   WIDTH(v) > linelength => charyTrouble(u,v,start,linelength)
    --   d := APP(v,start,0,nil)
    --   n := superspan v
    --   m := - subspan v
    -- -->
    --   $testOutputLineFlag =>
    --     $testOutputLineList :=
    --       [:ASSOCRIGHT SORTBY('CAR,d),:$testOutputLineList]
    --   until n < m repeat
    --     scylla(n,d)
    --     n := n - 1
    --   '" "
    charyTop(u: OutputForm, start: Integer, linelength: Integer): String ==
      op: OF := operator u
      l: List OF := arguments u
      op = sx "SC" or not atom? op and operator op = sx "SC" =>
        for a in l repeat charyTop(a, start, linelength)
        " "
    --   u is [['CONCATB,:.],:m,[['SC,:.],:l]] =>
      if not atom? op and operator op = sx "CONCATB" then
        m: List OF := reverse l
        a: OF := first l
        not atom? a and operator a = sx "SC" =>
          l := argument a
          charyTop(outputForm(sx "CONCATB", reverse m),start,linelength)
          charyTop(outputForm(sx "SC", l) ,start+2,linelength-2)

      op = sx "CENTER" and # arguments u = 1 =>
        a: OF := first arguments u
        b: OF := charyTopWidth a
        (w := WIDTH$Lisp b) > linelength-start => charyTop(a,start,linelength)
        charyTop(b, (linelength-start-w) quo 2, linelength)
    --   v := charyTopWidth u
    --   EQ(keyp u,'ELSE) => charyElse(u,v,start,linelength)
    --   WIDTH(v) > linelength => charyTrouble(u,v,start,linelength)
    --   d := APP(v,start,0,nil)
    --   n := superspan v
    --   m := - subspan v
    -- -->
    --   $testOutputLineFlag =>
    --     $testOutputLineList :=
    --       [:ASSOCRIGHT SORTBY('CAR,d),:$testOutputLineList]
    --   until n < m repeat
    --     scylla(n,d)
    --     n := n - 1
    --   '" "



    charybdis(u: OutputForm, start: Integer, linelength: Integer): String ==
      asOF(keyp$Lisp u) = sx "EQUATNUM" and not CDDR$Lisp u =>
        charybdis(paren first arguments u, start, linelength)
      charyTop(paren first arguments u, start, linelength)
@

\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@

<<*>>=
<<license>>
<<package OUTTRAN OutputTransformation>>
<<package MATHPRI MathPrint>>
@
\eject
\end{document}
