-- These two macros are necessary to distinguish between Rep and %.
rep x ==> (x@%) pretend Rep
per x ==> (x@Rep) pretend %
-------------------------------------------------------------------

ID ==> Symbol
-- Each vertex and each edge gets a unique id.

)abbrev category GRVERT GraphVertex
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ Category for vertices of a graph.
GraphVertex: Category == SetCategory with
    id: % -> ID
      ++ id(x) returns the id of the edge x.
  add
    hash(x: %): SingleInteger == hash id x
    latex(x: %): String == latex id x
    ((x: %) = (y: %)): Boolean == id x = id y
    coerce(x: %): OutputForm == id(x)::OutputForm

)abbrev category GREDGE GraphEdge
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ Category for edges of a graph.
GraphEdge(V: GraphVertex): Category == SetCategory with
    id: % -> ID
      ++ id() returns the id of the edge
    vertex1: % -> V
      ++ vertex1(x) returns the first vertex of an edge.
      ++ In case the edge is undirected, the following holds:
      ++ id vertex1 x < id vertex2 x.
    vertex2: % -> V
      ++ vertex2(x) returns the second vertex of an edge.
      ++ In case the edge is undirected, the following holds:
      ++ id vertex1 x < id vertex2 x.
  add
    hash(x: %): SingleInteger == hash id x
    latex(x: %): String == latex id x
    ((x: %) = (y: %)): Boolean == id x = id y
    coerce(x: %): OutputForm == id(x)::OutputForm

)abbrev category FGRAPH FinGraph
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ Category of finite graphs, allows us to model graph theory
FinGraph(V: GraphVertex, E: GraphEdge V): Category == SetCategory with
    finiteGraph: (List V, List E) -> %
      ++ finiteGraph(vertices, edgees) constructs a graph made
      ++ from vertices and edges.
    insert!: (V, %) -> %
      ++ insert!(v, x) adds a new vertex v to the graph x.
    insert!: (E, %) -> %
      ++ insert!(e, x) adds a new edge e and to the graph x
      ++ (including its vertices).
    vertices: % -> List V
      ++ vertices(x) returns all vertices of the graph x.
    edges: % -> List E
      ++ edges(x) returns all edges of the graph x.
  add
    ((x: %) = (y: %)): Boolean ==
        -- dummy implementation
        -- We assume the list of vertices and edges are sorted by their
        -- respective id's.
        vex := vertices x
	vey := vertices y
	#vex ~= #vey => false
	for vx in vex for vy in vey repeat if id vx ~= id vy then return false
        edx := edges x
	edy := edges y
	#edx ~= #edy => false
	for ex in edx for ey in edy repeat if id ex ~= id ey then return false
	true

)abbrev category LGRVERT LabeledGraphVertex
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ Category for vertices of a graph.
LabeledGraphVertex(L: SetCategory): Category == GraphVertex with
    vertex: L -> %
      ++ vertex(l) returns a vertex with label l.
    label: % -> L
      ++ label(x) returns the label corresponding to vertex x.
  add
    coerce(x: %): OutputForm == label(x)::OutputForm

)abbrev category LGREDGE LabeledGraphEdge
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ Category for labeled edges of a graph.
LabeledGraphEdge(L: SetCategory, V: GraphVertex): Category == GraphEdge V with
    edge: (L, V, V) -> %
      ++ edge(l, v1, v2) returns a vertex with label l going between
      ++ the vertices v1 and v2.
    label: % -> L
      ++ label(x) returns the label corresponding to vertex x.
  add
    coerce(x: %): OutputForm == label(x)::OutputForm

)abbrev domain LVERTEX LabeledVertex
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ A domain of vertices that are labeled.
LabeledVertex(L: SetCategory): LabeledGraphVertex(L) == add
    Rep == Record(id: ID, lab: L)
    vertex(l: L): % == per [new()$ID, l]
    id(x: %): ID == (rep x).id
    label(x: %): L == (rep x).lab

)abbrev domain LEDGE LabeledEdge
++ Author: Ralf Hemmecke
++ Keywords: graph theory
++ Description:
++ A domain of edges that are labeled.
LabeledEdge(L: SetCategory, V: LabeledGraphVertex L): LabeledGraphEdge(L, V)
  == add
    Rep == Record(id: ID, lab: L, vert1: V, vert2: V)
    edge(l: L, v1: V, v2: V): % == per [new()$ID, l, v1, v2]
    id(x: %): ID == (rep x).id
    label(x: %): L == (rep x).lab
    vertex1(x: %): V == (rep x).vert1
    vertex2(x: %): V == (rep x).vert2
    coerce(x: %): OutputForm ==
      l: OutputForm := label(x)::OutputForm
      v1: V := (rep x).vert1
      v2: V := (rep x).vert2
      l1: OutputForm := label(v1)::OutputForm
      l2: OutputForm := label(v2)::OutputForm
      hconcat [l, ": "::OutputForm, l1, " -- "::OutputForm, l2]
